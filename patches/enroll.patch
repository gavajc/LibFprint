From: Juan Carlos García Vázquez <gavajc@gmail.com>
Date: Thu, 01 Jul 2021 20:02:12 +0800
Subject: [PATCH] Enroll: Use Enroll program from libfprint V1.9.1

--- examples/enroll.c	2021-03-10 20:13:07.000000000 -0600
+++ examples/enroll.c	2021-04-26 00:53:39.658794391 -0500
@@ -22,26 +22,22 @@
 #define FP_COMPONENT "example-enroll"
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <libfprint/fprint.h>
-#include <glib-unix.h>
 
 #include "storage.h"
 #include "utilities.h"
 
 typedef struct _EnrollData
 {
-  GMainLoop    *loop;
-  GCancellable *cancellable;
-  unsigned int  sigint_handler;
-  FpFinger      finger;
-  int           ret_value;
+  GMainLoop *loop;
+  FpFinger   finger;
+  int        ret_value;
 } EnrollData;
 
 static void
 enroll_data_free (EnrollData *enroll_data)
 {
-  g_clear_handle_id (&enroll_data->sigint_handler, g_source_remove);
-  g_clear_object (&enroll_data->cancellable);
   g_main_loop_unref (enroll_data->loop);
   g_free (enroll_data);
 }
@@ -57,7 +53,7 @@
   fp_device_close_finish (dev, res, &error);
 
   if (error)
-    g_warning ("Failed closing device %s", error->message);
+    g_warning ("Failed closing device %s\n", error->message);
 
   g_main_loop_quit (enroll_data->loop);
 }
@@ -76,19 +72,15 @@
     {
       enroll_data->ret_value = EXIT_SUCCESS;
 
-      if (fp_device_has_feature (dev, FP_DEVICE_FEATURE_STORAGE))
-        g_debug ("Device has storage, saving a print reference locally");
-      else
-        g_debug ("Device has not storage, saving print only locally");
-
-      /* Even if the device has storage, it may not be able to save all the
-       * metadata that the print contains, so we can always save a local copy
-       * containing the handle to the device print */
-      int r = print_data_save (print, enroll_data->finger);
-      if (r < 0)
+      if (!fp_device_has_feature (dev, FP_DEVICE_FEATURE_STORAGE))
         {
-          g_warning ("Data save failed, code %d", r);
-          enroll_data->ret_value = EXIT_FAILURE;
+          g_debug ("Device has not storage, saving locally");
+          int r = print_data_save (print, enroll_data->finger);
+          if (r < 0)
+            {
+              g_warning ("Data save failed, code %d", r);
+              enroll_data->ret_value = EXIT_FAILURE;
+            }
         }
     }
   else
@@ -116,7 +108,7 @@
       return;
     }
 
-  if (print && fp_print_get_image (print) &&
+  if (fp_device_has_feature (device, FP_DEVICE_FEATURE_CAPTURE) &&
       print_image_save (print, "enrolled.pgm"))
     printf ("Wrote scanned image to enrolled.pgm\n");
 
@@ -146,22 +138,11 @@
   printf ("Scan your finger now.\n");
 
   print_template = print_create_template (dev, enroll_data->finger);
-  fp_device_enroll (dev, print_template, enroll_data->cancellable,
-                    on_enroll_progress, NULL, NULL,
-                    (GAsyncReadyCallback) on_enroll_completed,
+  fp_device_enroll (dev, print_template, NULL, on_enroll_progress, NULL,
+                    NULL, (GAsyncReadyCallback) on_enroll_completed,
                     enroll_data);
 }
 
-static gboolean
-sigint_cb (void *user_data)
-{
-  EnrollData *enroll_data = user_data;
-
-  g_cancellable_cancel (enroll_data->cancellable);
-
-  return G_SOURCE_CONTINUE;
-}
-
 int
 main (void)
 {
@@ -208,15 +189,8 @@
   enroll_data->finger = finger;
   enroll_data->ret_value = EXIT_FAILURE;
   enroll_data->loop = g_main_loop_new (NULL, FALSE);
-  enroll_data->cancellable = g_cancellable_new ();
-  enroll_data->sigint_handler = g_unix_signal_add_full (G_PRIORITY_HIGH,
-                                                        SIGINT,
-                                                        sigint_cb,
-                                                        enroll_data,
-                                                        NULL);
 
-  fp_device_open (dev, enroll_data->cancellable,
-                  (GAsyncReadyCallback) on_device_opened,
+  fp_device_open (dev, NULL, (GAsyncReadyCallback) on_device_opened,
                   enroll_data);
 
   g_main_loop_run (enroll_data->loop);
