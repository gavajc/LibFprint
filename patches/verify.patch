From: Juan Carlos García Vázquez <gavajc@gmail.com>
Date: Thu, 01 Jul 2021 20:23:16 +0800
Subject: [PATCH] Verify: Use Verify program from libfprint V1.9.7

--- examples/verify.c	2021-03-10 20:13:07.000000000 -0600
--- examples/verify.c	2021-04-26 00:35:47.135104387 -0500
@@ -22,26 +22,22 @@
 #define FP_COMPONENT "example-verify"
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <libfprint/fprint.h>
-#include <glib-unix.h>
 
 #include "storage.h"
 #include "utilities.h"
 
 typedef struct _VerifyData
 {
-  GMainLoop    *loop;
-  GCancellable *cancellable;
-  unsigned int  sigint_handler;
-  FpFinger      finger;
-  int           ret_value;
+  GMainLoop *loop;
+  FpFinger   finger;
+  int        ret_value;
 } VerifyData;
 
 static void
 verify_data_free (VerifyData *verify_data)
 {
-  g_clear_handle_id (&verify_data->sigint_handler, g_source_remove);
-  g_clear_object (&verify_data->cancellable);
   g_main_loop_unref (verify_data->loop);
   g_free (verify_data);
 }
@@ -57,7 +53,7 @@
   fp_device_close_finish (dev, res, &error);
 
   if (error)
-    g_warning ("Failed closing device %s", error->message);
+    g_warning ("Failed closing device %s\n", error->message);
 
   g_main_loop_quit (verify_data->loop);
 }
@@ -124,7 +120,7 @@
       return;
     }
 
-  if (print && fp_print_get_image (print) &&
+  if (print && fp_device_has_feature (dev, FP_DEVICE_FEATURE_CAPTURE) &&
       print_image_save (print, "verify.pgm"))
     g_print ("Print image saved as verify.pgm\n");
 
@@ -152,26 +148,6 @@
     }
 }
 
-static FpPrint *
-get_stored_print (FpDevice *dev, VerifyData *verify_data)
-{
-  FpPrint *verify_print;
-
-  g_print ("Loading previously enrolled %s finger data...\n",
-           finger_to_string (verify_data->finger));
-
-  verify_print = print_data_load (dev, verify_data->finger);
-
-  if (!verify_print)
-    {
-      g_warning ("Failed to load fingerprint data");
-      g_warning ("Did you remember to enroll your %s finger first?",
-                 finger_to_string (verify_data->finger));
-    }
-
-  return verify_print;
-}
-
 static void
 on_list_completed (FpDevice *dev, GAsyncResult *res, gpointer user_data)
 {
@@ -185,27 +161,15 @@
   if (!error)
     {
       FpPrint *verify_print = NULL;
-      g_autoptr(FpPrint) stored_print = NULL;
       guint i;
 
       if (!prints->len)
-        {
-          g_warning ("No prints saved on device");
-          verify_quit (dev, verify_data);
-          return;
-        }
-
-      stored_print = get_stored_print (dev, verify_data);
+        g_warning ("No prints saved on device");
 
       for (i = 0; i < prints->len; ++i)
         {
           FpPrint *print = prints->pdata[i];
 
-          if (stored_print && fp_print_equal (stored_print, print))
-            /* If the private print data matches, let's use the stored print
-             * as it contains more metadata to show */
-            print = stored_print;
-
           if (fp_print_get_finger (print) == verify_data->finger &&
               g_strcmp0 (fp_print_get_username (print), g_get_user_name ()) == 0)
             {
@@ -223,6 +187,8 @@
 
       if (!verify_print)
         {
+          g_warning ("Did you remember to enroll your %s finger first?",
+                     finger_to_string (verify_data->finger));
           verify_quit (dev, verify_data);
           return;
         }
@@ -231,7 +197,7 @@
                fp_print_get_description (verify_print));
 
       g_print ("Print loaded. Time to verify!\n");
-      fp_device_verify (dev, verify_print, verify_data->cancellable,
+      fp_device_verify (dev, verify_print, NULL,
                         on_match_cb, verify_data, NULL,
                         (GAsyncReadyCallback) on_verify_completed,
                         verify_data);
@@ -269,16 +235,23 @@
     }
   else
     {
-      g_autoptr(FpPrint) verify_print = get_stored_print (dev, verify_data);
+      g_print ("Loading previously enrolled %s finger data...\n",
+               finger_to_string (verify_data->finger));
+      g_autoptr(FpPrint) verify_print = NULL;
+
+      verify_print = print_data_load (dev, verify_data->finger);
 
       if (!verify_print)
         {
+          g_warning ("Failed to load fingerprint data");
+          g_warning ("Did you remember to enroll your %s finger first?",
+                     finger_to_string (verify_data->finger));
           verify_quit (dev, verify_data);
           return;
         }
 
       g_print ("Print loaded. Time to verify!\n");
-      fp_device_verify (dev, verify_print, verify_data->cancellable,
+      fp_device_verify (dev, verify_print, NULL,
                         on_match_cb, verify_data, NULL,
                         (GAsyncReadyCallback) on_verify_completed,
                         verify_data);
@@ -304,16 +277,6 @@
   start_verification (dev, verify_data);
 }
 
-static gboolean
-sigint_cb (void *user_data)
-{
-  VerifyData *verify_data = user_data;
-
-  g_cancellable_cancel (verify_data->cancellable);
-
-  return G_SOURCE_CONTINUE;
-}
-
 int
 main (void)
 {
@@ -344,14 +307,8 @@
   verify_data = g_new0 (VerifyData, 1);
   verify_data->ret_value = EXIT_FAILURE;
   verify_data->loop = g_main_loop_new (NULL, FALSE);
-  verify_data->cancellable = g_cancellable_new ();
-  verify_data->sigint_handler = g_unix_signal_add_full (G_PRIORITY_HIGH,
-                                                        SIGINT,
-                                                        sigint_cb,
-                                                        verify_data,
-                                                        NULL);
-  fp_device_open (dev, verify_data->cancellable,
-                  (GAsyncReadyCallback) on_device_opened,
+
+  fp_device_open (dev, NULL, (GAsyncReadyCallback) on_device_opened,
                   verify_data);
 
   g_main_loop_run (verify_data->loop);
